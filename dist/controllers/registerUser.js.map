{"version":3,"sources":["../../server/controllers/registerUser.js"],"names":["dotenv","config","registerUser","req","res","body","Lodash","pick","rules","email","password","password_confirmation","firstName","lastName","validation","Validator","fails","status","json","message","errors","all","client","Client","user","host","database","port","connect","then","console","log","usersTable","query","sql","params","existingUser","rows","jwt","sign","err","token","header","bcrypt","genSalt","salt","hash","hashedPassword","catch","stack"],"mappings":"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","file":"registerUser.js","sourcesContent":["import Validator from 'validatorjs';\r\nimport Lodash from 'lodash';\r\nimport dotenv from 'dotenv';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Client } from 'pg';\r\n\r\ndotenv.config();\r\n\r\n\r\n// app.use(bodyParser.json());\r\n// app.use(bodyParser.urlencoded({ extended: false }));\r\n\r\n\r\nconst registerUser = (req, res) => {\r\n  const body = Lodash.pick(req.body, ['firstName', 'lastName', 'email', 'password', 'password_confirmation']);\r\n  const rules = {\r\n    email: 'required|email',\r\n    password: 'required|min:6|confirmed',\r\n    password_confirmation: 'required',\r\n    firstName: 'required|min:3|string|max:20',\r\n    lastName: 'required|min:3|string|max:20',\r\n  };\r\n  const validation = new Validator(body, rules);\r\n\r\n  if (validation.fails()) {\r\n    return res.status(400).json({\r\n      message: validation.errors.all(),\r\n    });\r\n  }\r\n  const client = new Client({\r\n    user: 'postgres',\r\n    host: 'localhost',\r\n    database: 'diary_entries',\r\n    password: 'phoenix123',\r\n    port: 5432,\r\n  });\r\n  client.connect()\r\n    .then(() => {\r\n      console.log('connected successfully');\r\n      // const sql = 'INSERT INTO users (firstName, lastName) VALUES ( $1, $2)';\r\n      // const params = ['aaaa', 'bbbb'];\r\n      // return client.query(sql, params);\r\n      const usersTable = `CREATE TABLE IF NOT EXISTS users\r\n      (\r\n        id SERIAL PRIMARY KEY,\r\n        email VARCHAR(100) UNIQUE NOT NULL,\r\n        firstName VARCHAR(255) NOT NULL,\r\n        lastName VARCHAR(255) NOT NULL,\r\n        password VARCHAR(255) NOT NULL,\r\n        created_on TIMESTAMPTZ DEFAULT now() NOT NULL\r\n      );`;\r\n      return client.query(usersTable);\r\n    })\r\n    .then(() => {\r\n      console.log('got here');\r\n      const sql = 'SELECT * FROM users WHERE email = $1';\r\n      const params = [req.body.email];\r\n      return client.query(sql, params);\r\n    })\r\n    .then((existingUser) => {\r\n      // if there is no existing user, hash password\r\n      if (!existingUser.rows[0]) {\r\n        const user = {\r\n          email: req.body.email,\r\n          password: req.body.password,\r\n        };\r\n\r\n        jwt.sign({ user }, 'abc123', (err, token) => {\r\n          if (err) {\r\n            console.log('err', err);\r\n            return;\r\n          }\r\n          res.header('x-auth', token).json({\r\n            message: 'signed in successfully',\r\n          });\r\n        });\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          bcrypt.hash(req.body.password, salt, (err, hashedPassword) => {\r\n            req.body.password = hashedPassword;\r\n            console.log(req.body.password);\r\n            const sql = 'INSERT INTO users (firstName, lastName, email, password) VALUES ($1, $2, $3, $4)';\r\n            const params = [req.body.firstName, req.body.lastName, req.body.email, req.body.password];\r\n            console.log('inserted successfullly');\r\n            return client.query(sql, params);\r\n          });\r\n        });\r\n      }\r\n    })\r\n    // .then((result) => {\r\n    //   console.log('result?', result.rows[0]);\r\n    // })\r\n    .catch((err) => {\r\n      console.log(err.stack);\r\n      // console.log('could not connect');\r\n    });\r\n};\r\n\r\nexport default registerUser;\r\n"]}